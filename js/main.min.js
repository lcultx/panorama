/*! ThreeJS-Panorama 2014-09-08 */
"use strict";

function init() {
    camera = new THREE.PerspectiveCamera(fov, ratio, 1, 1e3), scene = new THREE.Scene();
    var mesh = new THREE.Mesh(new THREE.SphereGeometry(500, 60, 40), new THREE.MeshBasicMaterial({
        map: texture
    }));
    mesh.scale.x = -1, scene.add(mesh), renderer = new THREE.WebGLRenderer({
        antialias: !0
    }), renderer.setSize(width, height), element.appendChild(renderer.domElement), element.addEventListener("mousedown", onDocumentMouseDown, !1), 
    element.addEventListener("mousewheel", onDocumentMouseWheel, !1), element.addEventListener("DOMMouseScroll", onDocumentMouseWheel, !1), 
    window.addEventListener("resize", onWindowResized, !1), onWindowResized(null);
}

function onWindowResized() {
    renderer.setSize(width, height), camera.projectionMatrix.makePerspective(fov, ratio, 1, 1100);
}

function onDocumentMouseDown(event) {
    event.preventDefault(), onPointerDownPointerX = event.clientX, onPointerDownPointerY = event.clientY, 
    onPointerDownLon = lon, onPointerDownLat = lat, isUserInteracting = !0, element.addEventListener("mousemove", onDocumentMouseMove, !1), 
    element.addEventListener("mouseup", onDocumentMouseUp, !1);
}

function onDocumentMouseMove(event) {
    lon = (event.clientX - onPointerDownPointerX) * -.175 + onPointerDownLon, lat = (event.clientY - onPointerDownPointerY) * -.175 + onPointerDownLat;
}

function onDocumentMouseUp() {
    isUserInteracting = !1, element.removeEventListener("mousemove", onDocumentMouseMove, !1), 
    element.removeEventListener("mouseup", onDocumentMouseUp, !1);
}

function onDocumentMouseWheel(event) {
    event.wheelDeltaY ? fov -= .05 * event.wheelDeltaY : event.wheelDelta ? fov -= .05 * event.wheelDelta : event.detail && (fov += 1 * event.detail), 
    (45 > fov || fov > 90) && (fov = 45 > fov ? 45 : 90), camera.projectionMatrix.makePerspective(fov, ratio, 1, 1100);
}

function animate() {
    requestAnimationFrame(animate), render();
}

function render() {
    isUserInteracting === !1 && (lon += .05), lat = Math.max(-85, Math.min(85, lat)), 
    phi = THREE.Math.degToRad(90 - lat), theta = THREE.Math.degToRad(lon), camera.position.x = 100 * Math.sin(phi) * Math.cos(theta), 
    camera.position.y = 100 * Math.cos(phi), camera.position.z = 100 * Math.sin(phi) * Math.sin(theta);
    var log = "x: " + camera.position.x;
    log += "<br/>y: " + camera.position.y, log += "<br/>z: " + camera.position.z, log += "<br/>fov: " + fov, 
    document.getElementById("log").innerHTML = log, camera.lookAt(scene.position), renderer.render(scene, camera);
}

var camera, scene, element = document.getElementById("demo"), renderer, onPointerDownPointerX, onPointerDownPointerY, onPointerDownLon, onPointerDownLat, fov = 70, isUserInteracting = !1, lon = 0, lat = 0, phi = 0, theta = 0, onMouseDownMouseX = 0, onMouseDownMouseY = 0, onMouseDownLon = 0, onMouseDownLat = 0, width = 1440, height = 650, ratio = width / height, texture = THREE.ImageUtils.loadTexture("img/spherical_texture.jpg", new THREE.UVMapping(), function() {
    init(), animate();
});